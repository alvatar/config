;; el-get
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
;(setq user-emacs-directory "~/.emacs.d")

(if (eq system-type 'windows-nt)
    ;; Windows. $HOME in minibuffer will show you the path.
    (progn
      (package-initialize)
      (unless (require 'el-get nil 'noerror)
        (require 'package)
        (add-to-list 'package-archives
                     '("melpa" . "http://melpa.org/packages/"))
        (package-refresh-contents)
        (package-initialize)
        (package-install 'el-get)
        (require 'el-get))
      (setq default-directory "C:/MinGW/msys/1.0/home/Alvaro/"))
  ;; Linux, OSX
  (progn
    (unless (require 'el-get nil 'noerror)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
        (goto-char (point-max))
        (eval-print-last-sexp)))))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

;; set local recipes, el-get-sources should only accept PLIST element
(setq
 el-get-sources
 '((:name buffer-move                   ; have to add your own keys
    :after (progn
             (global-set-key (kbd "<C-S-up>")     'buf-move-up)
             (global-set-key (kbd "<C-S-down>")   'buf-move-down)
             (global-set-key (kbd "<C-S-left>")   'buf-move-left)
             (global-set-key (kbd "<C-S-right>")  'buf-move-right)))
   (:name smex                          ; a better (ido like) M-x
    :after (progn
             (setq smex-save-file "~/.emacs.d/.smex-items")
             (global-set-key (kbd "M-x") 'smex)
             (global-set-key (kbd "M-X") 'smex-major-mode-commands)))
   (:name magit                        ; git meet emacs, and a binding
    :after (progn
             (global-set-key (kbd "C-x C-z") 'magit-status)))
   (:name switch-window          ; takes over C-x o
    :after (progn
             (global-set-key (kbd "C-x o") 'switch-window)))
   (:name goto-last-change          ; move pointer back to last change
          :after (progn
                   ;; when using AZERTY keyboard, consider C-x C-_
                   (global-set-key (kbd "C-x C-/") 'goto-last-change)))
   (:name paredit
    :after (progn
             (add-hook 'emacs-lisp-mode-hook (lambda () (paredit-mode +1)))
             (add-hook 'scheme-mode-hook (lambda () (paredit-mode +1)))
             (add-hook 'scheme-interaction-mode-hook (lambda () (paredit-mode +1)))))
   (:name linum-ex
    :after (progn
             (global-linum-mode 1)))
   (:name color-theme-solarized ; Color theme
    :after (progn
             (when (display-graphic-p)
               (color-theme-solarized 'light))))
   (:name js2-mode
    :after (progn
             (setq js-indent-level 2)))))

;; now set our own packages
(setq
 my:el-get-packages
 (append
  '(el-get                  ; el-get is self-hosting
    auto-complete           ; complete as you type with overlays
    emmet-mode              ; zencoding evolved
    color-theme             ; nice looking emacs
    iedit                   ; edit multiple occurrences simultaneously
    js2-mode
    go-mode
    cscope
    )
  (mapcar 'el-get-source-name el-get-sources)))
   
;; install new packages and init already installed packages
(el-get 'sync my:el-get-packages)

;;-----------------

;; General Config

(setq backup-inhibited t)
(setq auto-save-default nil)
(setq-default indent-tabs-mode nil)
(setq make-backup-files nil)
(setq browse-url-generic-program (executable-find "firefox")
      browse-url-browser-function 'browse-url-generic)
(fset 'yes-or-no-p 'y-or-n-p)
(add-hook 'find-file-hook
          (lambda ()
            (setf show-trailing-whitespace t)))

;;; Look & feel

(custom-set-variables
 '(inhibit-startup-screen t)
 ;;'(initial-buffer-choice "/")
 '(load-home-init-file t t))
(custom-set-faces)
(menu-bar-mode 0)
(if (display-graphic-p)
    (progn
      (scroll-bar-mode 0)
      (tool-bar-mode 0)
      ;; Fonts
      (if (eq system-type 'darwin)
          (progn
            ;; default Latin font (e.g. Consolas)
            (set-face-attribute 'default nil :family "Courier")
            ;; default font size (point * 10)
            ;; WARNING!  Depending on the default font,
            ;; if the size is not supported very well, the frame will be clipped
            ;; so that the beginning of the buffer may not be visible correctly. 
            (set-face-attribute 'default nil :height 110))
        (progn
          (set-default-font "-*-montecarlo-medium-*-normal-*-*-*-*-*-*-*-*-*")
          (set-face-attribute 'default nil :height 110)
          (set-face-font 'font-lock-comment-face "-*-montecarlo-medium-*-normal-*-*-*-*-*-*-*-*-*")
          (set-face-foreground 'font-lock-comment-delimiter-face "DimGrey")
          (set-face-font 'font-lock-comment-delimiter-face "-*-montecarlo-medium-*-normal-*-*-*-*-*-*-*-*-*")
          (set-face-foreground 'font-lock-comment-face "DimGrey")))))
(column-number-mode 1)
(line-number-mode 1)
(blink-cursor-mode 0)
(global-font-lock-mode 1)
(transient-mark-mode 1)
(setq show-paren-delay 0
      show-paren-style 'parenthesis)
(show-paren-mode 1)
(setq ns-right-alternate-modifier nil)

;; Aspell

(setq ispell-program-name "aspell")
(setq exec-path (cons "/usr/local/bin/" exec-path))

;; Etags

(defun create-tags (dir-name)
  "Create tags file."
  (interactive
   "DDirectory:")
  (shell-command
   (format "cd %s && find . -type f | grep \".*\\.\\(c\\|h\\|cpp\\|hpp\\|scm\\|sld\\|ss\\)$\" | xargs etags"
           (directory-file-name dir-name))))

;; Scheme

(add-to-list 'auto-mode-alist '("\\.sld\\'" . scheme-mode))
(setq scheme-program-name "/usr/local/Gambit-C/bin/gsc")
(font-lock-add-keywords 'scheme-mode
                        '(("(\\(lambda\\)\\>" (0 (prog1 ()
                                                   (compose-region (match-beginning 1)
                                                                   (match-end 1)
                                                                   ?Î»))))))
(global-set-key "\C-c\C-qr" 'run-scheme)
(global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-c\M-c" 'uncomment-region)
(add-hook 'scheme-mode-hook
          (lambda ()
            (define-key scheme-mode-map "\C-c\C-i" 'scheme-import-file)))
(add-hook 'inferior-scheme-mode-hook
          (lambda ()
            (linum-mode 0)))
(add-hook 'inferior-scheme-mode-hook
          (lambda ()
            (define-key scheme-mode-map "\C-c\C-c" 'comment-region)
            (define-key scheme-mode-map "\C-c\M-c" 'uncomment-region)))

;; Load remote SchemeSpheres remote debugging if installed
(let ((sense-emacs "~/Dropbox/projects/sphere-energy/src/remote/sense-emacs.el"
       ;;"/usr/local/Gambit-C/spheres/energy/src/remote/sense-emacs.el"
       ))
  (message "Emacs Sense loaded")
  (if (file-exists-p sense-emacs)
      (load-file sense-emacs)))

;;-----------------

;; Custom functions

(defun rm-trailing-spaces ()
  "Remove spaces at ends of all lines"
  (interactive)
  (save-excursion
    (let ((current (point)))
      (goto-char 0)
      (while (re-search-forward "[ \t]+$" nil t)
        (replace-match "" nil nil))
      (goto-char current))))
